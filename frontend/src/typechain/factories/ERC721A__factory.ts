/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ERC721A, ERC721AInterface } from "../ERC721A";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "maxBatchSize_",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nextOwnerToExplicitlySet",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "tokenByIndex",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "tokenOfOwnerByIndex",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60a06040526000805560006007553480156200001a57600080fd5b5060405162001ad338038062001ad38339810160408190526200003d91620001f2565b60008111620000695760405162461bcd60e51b8152600401620000609062000262565b60405180910390fd5b82516200007e906001906020860190620000a1565b50815162000094906002906020850190620000a1565b5060805250620002fc9050565b828054620000af90620002a9565b90600052602060002090601f016020900481019282620000d357600085556200011e565b82601f10620000ee57805160ff19168380011785556200011e565b828001600101855582156200011e579182015b828111156200011e57825182559160200191906001019062000101565b506200012c92915062000130565b5090565b5b808211156200012c576000815560010162000131565b600082601f83011262000158578081fd5b81516001600160401b0380821115620001755762000175620002e6565b6040516020601f8401601f19168201810183811183821017156200019d576200019d620002e6565b6040528382528584018101871015620001b4578485fd5b8492505b83831015620001d75785830181015182840182015291820191620001b8565b83831115620001e857848185840101525b5095945050505050565b60008060006060848603121562000207578283fd5b83516001600160401b03808211156200021e578485fd5b6200022c8783880162000147565b9450602086015191508082111562000242578384fd5b50620002518682870162000147565b925050604084015190509250925092565b60208082526027908201527f455243373231413a206d61782062617463682073697a65206d757374206265206040820152666e6f6e7a65726f60c81b606082015260800190565b600281046001821680620002be57607f821691505b60208210811415620002e057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6080516117b46200031f60003960008181610b620152610b8c01526117b46000f3fe608060405234801561001057600080fd5b50600436106100eb5760003560e01c80634f6ccce7116100925780634f6ccce7146101b15780636352211e146101c457806370a08231146101d757806395d89b41146101ea578063a22cb465146101f2578063b88d4fde14610205578063c87b56dd14610218578063d7224ba01461022b578063e985e9c514610233576100eb565b806301ffc9a7146100f057806306fdde0314610119578063081812fc1461012e578063095ea7b31461014e57806318160ddd1461016357806323b872dd146101785780632f745c591461018b57806342842e0e1461019e575b600080fd5b6101036100fe366004611074565b610246565b6040516101109190611170565b60405180910390f35b6101216102a9565b604051610110919061117b565b61014161013c3660046110ac565b61033b565b604051610110919061111f565b61016161015c36600461104b565b610387565b005b61016b610420565b60405161011091906115e0565b610161610186366004610f0b565b610426565b61016b61019936600461104b565b610431565b6101616101ac366004610f0b565b61052c565b61016b6101bf3660046110ac565b610547565b6101416101d23660046110ac565b610573565b61016b6101e5366004610ebf565b610585565b6101216105d2565b610161610200366004611011565b6105e1565b610161610213366004610f46565b6106af565b6101216102263660046110ac565b6106e8565b61016b61076b565b610103610241366004610ed9565b610771565b60006001600160e01b031982166380ac58cd60e01b148061027757506001600160e01b03198216635b5e139f60e01b145b8061029257506001600160e01b0319821663780e9d6360e01b145b806102a157506102a18261079f565b90505b919050565b6060600180546102b8906116b9565b80601f01602080910402602001604051908101604052809291908181526020018280546102e4906116b9565b80156103315780601f1061030657610100808354040283529160200191610331565b820191906000526020600020905b81548152906001019060200180831161031457829003601f168201915b5050505050905090565b6000610346826107b8565b61036b5760405162461bcd60e51b815260040161036290611593565b60405180910390fd5b506000908152600560205260409020546001600160a01b031690565b600061039282610573565b9050806001600160a01b0316836001600160a01b031614156103c65760405162461bcd60e51b815260040161036290611461565b806001600160a01b03166103d86107bf565b6001600160a01b031614806103f457506103f4816102416107bf565b6104105760405162461bcd60e51b8152600401610362906112a2565b61041b8383836107c3565b505050565b60005490565b61041b83838361081f565b600061043c83610585565b821061045a5760405162461bcd60e51b81526004016103629061118e565b6000610464610420565b905060008060005b8381101561050d576000818152600360209081526040918290208251808401909352546001600160a01b038116808452600160a01b9091046001600160401b031691830191909152156104be57805192505b876001600160a01b0316836001600160a01b031614156104fa57868414156104ec5750935061052692505050565b836104f6816116f4565b9450505b5080610505816116f4565b91505061046c565b5060405162461bcd60e51b8152600401610362906114f6565b92915050565b61041b838383604051806020016040528060008152506106af565b6000610551610420565b821061056f5760405162461bcd60e51b81526004016103629061121a565b5090565b600061057e82610b31565b5192915050565b60006001600160a01b0382166105ad5760405162461bcd60e51b8152600401610362906112fb565b506001600160a01b03166000908152600460205260409020546001600160801b031690565b6060600280546102b8906116b9565b6105e96107bf565b6001600160a01b0316826001600160a01b0316141561061a5760405162461bcd60e51b8152600401610362906113db565b80600660006106276107bf565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff19169215159290921790915561066b6107bf565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516106a39190611170565b60405180910390a35050565b6106ba84848461081f565b6106c684848484610c43565b6106e25760405162461bcd60e51b8152600401610362906114a3565b50505050565b60606106f3826107b8565b61070f5760405162461bcd60e51b81526004016103629061138c565b6000610719610d5f565b905060008151116107395760405180602001604052806000815250610764565b8061074384610d71565b6040516020016107549291906110f0565b6040516020818303038152906040525b9392505050565b60075481565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b6001600160e01b031981166301ffc9a760e01b14919050565b6000541190565b3390565b60008281526005602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b600061082a82610b31565b9050600081600001516001600160a01b03166108446107bf565b6001600160a01b03161480610879575061085c6107bf565b6001600160a01b031661086e8461033b565b6001600160a01b0316145b8061088d5750815161088d906102416107bf565b9050806108ac5760405162461bcd60e51b81526004016103629061140f565b846001600160a01b031682600001516001600160a01b0316146108e15760405162461bcd60e51b815260040161036290611346565b6001600160a01b0384166109075760405162461bcd60e51b81526004016103629061125d565b61091485858560016106e2565b61092460008484600001516107c3565b6001600160a01b03851660009081526004602052604081208054600192906109569084906001600160801b0316611637565b82546101009290920a6001600160801b038181021990931691831602179091556001600160a01b038616600090815260046020526040812080546001945090926109a2918591166115e9565b82546001600160801b039182166101009390930a9283029190920219909116179055506040805180820182526001600160a01b0380871682526001600160401b03428116602080850191825260008981526003909152948520935184549151909216600160a01b0267ffffffffffffffff60a01b19929093166001600160a01b03199091161716179055610a3784600161160b565b6000818152600360205260409020549091506001600160a01b0316610adb57610a5f816107b8565b15610adb5760408051808201825284516001600160a01b0390811682526020808701516001600160401b0390811682850190815260008781526003909352949091209251835494516001600160a01b031990951692169190911767ffffffffffffffff60a01b1916600160a01b93909116929092029190911790555b83856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610b2986868660016106e2565b505050505050565b610b39610e91565b610b42826107b8565b610b5e5760405162461bcd60e51b8152600401610362906111d0565b60007f00000000000000000000000000000000000000000000000000000000000000008310610bbf57610bb17f00000000000000000000000000000000000000000000000000000000000000008461165f565b610bbc90600161160b565b90505b825b818110610c2a576000818152600360209081526040918290208251808401909352546001600160a01b038116808452600160a01b9091046001600160401b03169183019190915215610c175792506102a4915050565b5080610c22816116a2565b915050610bc1565b5060405162461bcd60e51b815260040161036290611544565b6000610c57846001600160a01b0316610e8b565b15610d5357836001600160a01b031663150b7a02610c736107bf565b8786866040518563ffffffff1660e01b8152600401610c959493929190611133565b602060405180830381600087803b158015610caf57600080fd5b505af1925050508015610cdf575060408051601f3d908101601f19168201909252610cdc91810190611090565b60015b610d39573d808015610d0d576040519150601f19603f3d011682016040523d82523d6000602084013e610d12565b606091505b508051610d315760405162461bcd60e51b8152600401610362906114a3565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610d57565b5060015b949350505050565b60408051602081019091526000815290565b606081610d9657506040805180820190915260018152600360fc1b60208201526102a4565b8160005b8115610dc05780610daa816116f4565b9150610db99050600a83611623565b9150610d9a565b6000816001600160401b03811115610de857634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610e12576020820181803683370190505b5090505b8415610d5757610e2760018361165f565b9150610e34600a8661170f565b610e3f90603061160b565b60f81b818381518110610e6257634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350610e84600a86611623565b9450610e16565b3b151590565b604080518082019091526000808252602082015290565b80356001600160a01b03811681146102a457600080fd5b600060208284031215610ed0578081fd5b61076482610ea8565b60008060408385031215610eeb578081fd5b610ef483610ea8565b9150610f0260208401610ea8565b90509250929050565b600080600060608486031215610f1f578081fd5b610f2884610ea8565b9250610f3660208501610ea8565b9150604084013590509250925092565b60008060008060808587031215610f5b578081fd5b610f6485610ea8565b93506020610f73818701610ea8565b93506040860135925060608601356001600160401b0380821115610f95578384fd5b818801915088601f830112610fa8578384fd5b813581811115610fba57610fba61174f565b604051601f8201601f1916810185018381118282101715610fdd57610fdd61174f565b60405281815283820185018b1015610ff3578586fd5b81858501868301379081019093019390935250939692955090935050565b60008060408385031215611023578182fd5b61102c83610ea8565b915060208301358015158114611040578182fd5b809150509250929050565b6000806040838503121561105d578182fd5b61106683610ea8565b946020939093013593505050565b600060208284031215611085578081fd5b813561076481611765565b6000602082840312156110a1578081fd5b815161076481611765565b6000602082840312156110bd578081fd5b5035919050565b600081518084526110dc816020860160208601611676565b601f01601f19169290920160200192915050565b60008351611102818460208801611676565b835190830190611116818360208801611676565b01949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611166908301846110c4565b9695505050505050565b901515815260200190565b60006020825261076460208301846110c4565b60208082526022908201527f455243373231413a206f776e657220696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b6020808252602a908201527f455243373231413a206f776e657220717565727920666f72206e6f6e657869736040820152693a32b73a103a37b5b2b760b11b606082015260800190565b60208082526023908201527f455243373231413a20676c6f62616c20696e646578206f7574206f6620626f756040820152626e647360e81b606082015260800190565b60208082526025908201527f455243373231413a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526039908201527f455243373231413a20617070726f76652063616c6c6572206973206e6f74206f6040820152781ddb995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b603a1b606082015260800190565b6020808252602b908201527f455243373231413a2062616c616e636520717565727920666f7220746865207a60408201526a65726f206164647265737360a81b606082015260800190565b60208082526026908201527f455243373231413a207472616e736665722066726f6d20696e636f72726563746040820152651037bbb732b960d11b606082015260800190565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201526e3732bc34b9ba32b73a103a37b5b2b760891b606082015260800190565b6020808252601a908201527922a9219b9918a09d1030b8383937bb32903a379031b0b63632b960311b604082015260600190565b60208082526032908201527f455243373231413a207472616e736665722063616c6c6572206973206e6f74206040820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b606082015260800190565b60208082526022908201527f455243373231413a20617070726f76616c20746f2063757272656e74206f776e60408201526132b960f11b606082015260800190565b60208082526033908201527f455243373231413a207472616e7366657220746f206e6f6e204552433732315260408201527232b1b2b4bb32b91034b6b83632b6b2b73a32b960691b606082015260800190565b6020808252602e908201527f455243373231413a20756e61626c6520746f2067657420746f6b656e206f662060408201526d0deeedccae440c4f240d2dcc8caf60931b606082015260800190565b6020808252602f908201527f455243373231413a20756e61626c6520746f2064657465726d696e652074686560408201526e1037bbb732b91037b3103a37b5b2b760891b606082015260800190565b6020808252602d908201527f455243373231413a20617070726f76656420717565727920666f72206e6f6e6560408201526c3c34b9ba32b73a103a37b5b2b760991b606082015260800190565b90815260200190565b60006001600160801b0382811684821680830382111561111657611116611723565b6000821982111561161e5761161e611723565b500190565b60008261163257611632611739565b500490565b60006001600160801b038381169083168181101561165757611657611723565b039392505050565b60008282101561167157611671611723565b500390565b60005b83811015611691578181015183820152602001611679565b838111156106e25750506000910152565b6000816116b1576116b1611723565b506000190190565b6002810460018216806116cd57607f821691505b602082108114156116ee57634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561170857611708611723565b5060010190565b60008261171e5761171e611739565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b03198116811461177b57600080fd5b5056fea264697066735822122080c87213f2be242a0b715741473e6d26c50c66c9cf55b0094f05e5a05068c3f064736f6c63430008000033";

export class ERC721A__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    name_: string,
    symbol_: string,
    maxBatchSize_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC721A> {
    return super.deploy(
      name_,
      symbol_,
      maxBatchSize_,
      overrides || {}
    ) as Promise<ERC721A>;
  }
  getDeployTransaction(
    name_: string,
    symbol_: string,
    maxBatchSize_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      name_,
      symbol_,
      maxBatchSize_,
      overrides || {}
    );
  }
  attach(address: string): ERC721A {
    return super.attach(address) as ERC721A;
  }
  connect(signer: Signer): ERC721A__factory {
    return super.connect(signer) as ERC721A__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC721AInterface {
    return new utils.Interface(_abi) as ERC721AInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC721A {
    return new Contract(address, _abi, signerOrProvider) as ERC721A;
  }
}
